commonList = [
  {regex: / return$/,
    token: "f5operator"},
  {regex: /(pool)(\s+)(.*)/,
    token: ["f5object", null, "poolname"]},
  {regex: /"(?:[^\\]|\\.)*?"/, token: "string"},
  {regex: /'(?:[^\\]|\\.)*?'/, token: "string"},
  {regex: /(function)(\s+)([a-z$][\w$]*)/,
    token: ["keyword", null, "variable-2"]},
  {regex: allKeywordsRe,
    token: "httpvariables"},
  {regex: allSpecialWords,
    token: "f5object"},
  {regex: tclKeywords,
    token: "keyword"},
  {regex: functionWords,
    token: "keyword"},
  {regex: / contains | ends_with | equals | matches | matches_regex | starts_with | and | not | or /,
    token: "f5operator"},
  {regex: /true | false | null | undefined/, token: "atom"},
  {regex: /0x[a-f\d]+|[-+]?(?:\.\d+|\d+\.?\d*)(?:e[-+]?\d+)?/i,
    token: "number"},
  {regex: /#.*/, token: "comment"},
  {regex: /\/(?:[^\\]|\\.)*?\//, token: "variable-3"},
  {regex: /[+=<>!]+/, token: "operator"},
  {regex: /\[|\]/, token: "operator"},
  {regex: /\{/, token: "curlybrace", indent: true},
  {regex: /\}/, token: "curlybrace", sol: true, dedent: true, next: "start"},
  {regex: /\}/, token: "curlybrace", dedent: true},
  {regex: /\$[\w]*/, token: "variable"}]

CodeMirror.defineSimpleMode("irule", {
  // The start state contains the rules that are intially used
  start: [
    {regex: /#.*/, token: "comment"},
    {regex: /when\s+/, token: "event", sol: true, push: "events"},
  ],
  access: commonList,
  adapt: commonList,
  asm: commonList,
  auth: commonList,
  cache: commonList,
  category: commonList,
  client: commonList,
  clientssl: commonList,
  diameter: commonList,
  fix: commonList,
  html: commonList,
  http: commonList,
  icap: commonList,
  dos: commonList,
  lb: commonList,
  dns: commonList,
  rtsp: commonList,
  init: commonList,
  server: commonList,
  serverssl: commonList,
  sip: commonList,
  misc: commonList,
  xml: commonList,
  poolState: [],
  events: [
    {regex: /ACCESS_SESSION_STARTED |ACCESS_SESSION_CLOSED |ACCESS_ACL_ALLOWED |ACCESS_ACL_DENIED |ACCESS_POLICY_AGENT_EVENT |ACCESS_POLICY_COMPLETED /,
      token: "accessevent", push: "access"},
    {regex: /ADAPT_REQUEST_RESULT |ADAPT_RESPONSE_RESULT/,
      token: "adaptevent", push: "adapt"},
    {regex: /ASM_REQUEST_BLOCKING |ASM_REQUEST_DONE |ASM_REQUEST_VIOLATION |ASM_RESPONSE_VIOLATION/,
      token: "asmevent", push: "asm"},
    {regex: /AUTH_ERROR |AUTH_FAILURE |AUTH_RESULT |AUTH_SUCCESS |AUTH_WANTCREDENTIAL/,
      token: "authevent", push: "auth"},
    {regex: /CACHE_REQUEST |CACHE_RESPONSE |CACHE_UPDATE/,
      token: "cacheevent", push: "cache"},
    {regex: /CATEGORY_MATCHED |CLASSIFICATION_DETECTED/,
      token: "categoryevent", push: "category"},
    {regex: /CLIENT_ACCEPTED |CLIENT_CLOSED |CLIENT_DATA |CLIENT_LINE/,
      token: "clienttcpevent", push: "client"},
    {regex: /CLIENTSSL_CLIENTCERT |CLIENTSSL_CLIENTHELLO |CLIENTSSL_DATA |CLIENTSSL_HANDSHAKE |CLIENTSSL_SERVERHELLO_SEND/,
      token: "clientsslevent", push: "clientssl"},
    {regex: /DIAMETER_INGRESS |DIAMETER_EGRESS/,
      token: "diameterevent", push: "diameter"},
    {regex: /FIX_MESSAGE |FLOW_INIT/,
      token: "fixevent", push: "fix"},
    {regex: /HTML_COMMENT_MATCHED |HTML_TAG_MATCHED/,
      token: "htmlevent", push: "html"},
    {regex: /HTTP_CLASS_FAILED |HTTP_CLASS_SELECTED |HTTP_DISABLED |HTTP_PROXY_REQUEST |HTTP_REQUEST |HTTP_REQUEST_DATA |HTTP_REQUEST_SEND |HTTP_RESPONSE |HTTP_RESPONSE_CONTINUE |HTTP_RESPONSE_DATA |HTTP_REQUEST_RELEASE |HTTP_RESPONSE_RELEASE/,
      token: "httpevent", push: "http"},
    {regex: /ICAP_REQUEST |ICAP_RESPONSE/,
      token: "icapevent", push: "icap"},
    {regex: /IN_DOSL7_ATTACK/,
      token: "dosevent", push: "dos"},
    {regex: /LB_FAILED |LB_QUEUED |LB_SELECTED/,
      token: "lbevent", push: "lb"},
    {regex: /DNS_REQUEST |DNS_RESPONSE |NAME_RESOLVED |PCP_REQUEST |PCP_RESPONSE |QOE_PARSE_DONE |REWRITE_REQUEST_DONE |REWRITE_RESPONSE_DONE/,
      token: "dnsevent", push: "dns"},
    {regex: /RTSP_REQUEST |RTSP_REQUEST_DATA |RTSP_RESPONSE |RTSP_RESPONSE_DATA/,
      token: "rtspevent", push: "rtsp"},
    {regex: /RULE_INIT /,
      token: "ruleinitevent", push: "init"},
    {regex: /SERVER_CLOSED |SERVER_CONNECTED |SERVER_DATA |SERVER_LINE/,
      token: "serverevent", push: "server"},
    {regex: /SERVERSSL_CLIENTHELLO_SEND |SERVERSSL_DATA |SERVERSSL_HANDSHAKE |SERVERSSL_SERVERHELLO/,
      token: "serversslevent", push: "serverssl"},
    {regex: /SIP_REQUEST |SIP_REQUEST_SEND |SIP_RESPONSE |SIP_RESPONSE_SEND/,
      token: "sipevent", push: "sip"},
    {regex: /SOCKS_REQUEST |STREAM_MATCHED |USER_REQUEST |USER_RESPONSE/,
      token: "miscevent", push: "misc"},
    {regex: /XML_BEGIN_DOCUMENT |XML_BEGIN_ELEMENT |XML_CDATA |XML_CONTENT_BASED_ROUTING |XML_END_DOCUMENT |XML_END_ELEMENT |XML_EVENT/,
      token: "xmlevent", push: "xml"},
    {regex: /#.*/, token: "comment"},
    {regex: /\{/, token: "curlybrace", indent: true},
    {regex: /\}/, token: "curlybrace", dedent: true},
  ],
  meta: {
    dontIndentStates: ["comment"],
    lineComment: "#"
  }
});
